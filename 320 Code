import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)

CLK=38
DIO=37

HEXDIGITS = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f]

HEXLETTERS = {
    'A': 0x77,
    'B': 0x7f,
    'b': 0x7C,
    'C': 0x39,
    'c': 0x58,
    'D': 0x3f,
    'd': 0x5E,
    'E': 0x79,
    'F': 0x71,
    'G': 0x7d,
    'H': 0x76,
    'h': 0x74,
    'I': 0x06,
    'J': 0x1f,
    'K': 0x76,
    'L': 0x38,
    'l': 0x06,
    'n': 0x54,
    'O': 0x3f,
    'o': 0x5c,
    'P': 0x73,
    'r': 0x50,
    'S': 0x6d,
    'U': 0x3e,
    'V': 0x3e,
    'Y': 0x66,
    'Z': 0x5b,
    ' ': 0x00,
    '-': 0x40,
    'T1': 0x07,
    'T2': 0x31,
    'M1': 0x33,
    'M2': 0x27,
    'W1': 0x3c,
    'W2': 0x1e,
}

ADDR_AUTO = 0x40
ADDR_FIXED = 0x44
STARTADDR = 0xC0
BRIGHT_DARKEST = 0
BRIGHT_DEFAULT = 2
BRIGHT_HIGHEST = 7
OUTPUT = GPIO.OUT
INPUT = GPIO.IN
LOW = GPIO.LOW
HIGH = GPIO.HIGH

class TM1637:
    __doublepoint = False
    __clk_pin = 0
    __data_pin = 0
    __brightness = BRIGHT_DEFAULT
    __current_data = [' ', ' ', ' ', ' ']

    def __init__(self, clock_pin, data_pin, brightness=BRIGHT_DEFAULT):
        self.__clk_pin = clock_pin
        self.__data_pin = data_pin
        self.__brightness = brightness
        GPIO.setup(self.__clk_pin, OUTPUT)
        GPIO.setup(self.__data_pin, OUTPUT)

    def clear(self):
        b = self.__brightness
        point = self.__doublepoint
        self.__brightness = 0
        self.__doublepoint = False
        data = [' ', ' ', ' ', ' ']
        self.set_values(data)
        self.__brightness = b
        self.__doublepoint = point

    def set_values(self, data):
        for i in range(4):
            self.__current_data[i] = data[i]

        self.start()
        self.write_byte(ADDR_AUTO)
        self.stop()
        self.start()
        self.write_byte(STARTADDR)
        for i in range(4):
            self.write_byte(self.encode(data[i]))
        self.stop()
        self.start()
        self.write_byte(0x88 + self.__brightness)
        self.stop()

    def set_value(self, value, index):
        if index not in range(4):
            pass

        self.__current_data[index] = value;

        self.start()
        self.write_byte(ADDR_FIXED)
        self.stop()
        self.start()
        self.write_byte(STARTADDR | index)
        self.write_byte(self.encode(value))
        self.stop()
        self.start()
        self.write_byte(0x88 + self.__brightness)
        self.stop()

    def set_brightness(self, brightness):
        if brightness not in range(8):
            pass

        self.__brightness = brightness
        self.set_values(self.__current_data)

    def set_doublepoint(self, value):
        self.__doublepoint = value
        self.set_values(self.__current_data)

    def encode(self, data):
        point = 0x80 if self.__doublepoint else 0x00;

        if data == 0x7F:
            data = 0
        elif data in HEXLETTERS:
            data = HEXLETTERS[data] + point
        else:
            data = HEXDIGITS[data] + point
        return data

    def write_byte(self, data):
        for i in range(8):
            GPIO.output(self.__clk_pin, LOW)
            if data & 0x01:
                GPIO.output(self.__data_pin, HIGH)
            else:
                GPIO.output(self.__data_pin, LOW)
            data >>= 1
            GPIO.output(self.__clk_pin, HIGH)

        GPIO.output(self.__clk_pin, LOW)
        GPIO.output(self.__data_pin, HIGH)
        GPIO.output(self.__clk_pin, HIGH)
        GPIO.setup(self.__data_pin, INPUT)

        while GPIO.input(self.__data_pin):
            time.sleep(0.001)
            if GPIO.input(self.__data_pin):
                GPIO.setup(self.__data_pin, OUTPUT)
                GPIO.output(self.__data_pin, LOW)
                GPIO.setup(self.__data_pin, INPUT)
        GPIO.setup(self.__data_pin, OUTPUT)

    def start(self):
        GPIO.output(self.__clk_pin, HIGH)
        GPIO.output(self.__data_pin, HIGH)
        GPIO.output(self.__data_pin, LOW)
        GPIO.output(self.__clk_pin, LOW)

    def stop(self):
        GPIO.output(self.__clk_pin, LOW)
        GPIO.output(self.__data_pin, LOW)
        GPIO.output(self.__clk_pin, HIGH)
        GPIO.output(self.__data_pin, HIGH)

    def cleanup(self):
        GPIO.cleanup(self.__clk_pin)
        GPIO.cleanup(self.__data_pin)

    def custom(self,segments,name):
        bin_result=0000000
        hex_result=0

        if 'a' in segments:
           bin_result+=1
        if 'b' in segments:
           bin_result+=2
        if 'c' in segments:
           bin_result+=4
        if 'd' in segments:
           bin_result+=8
        if 'e' in segments:
           bin_result+=16
        if 'f' in segments:
           bin_result+=32
        if 'g' in segments:
           bin_result+=64

        hex_result=hex(bin_result)
        HEXLETTERS[name]=bin_result

        return

    def timer(self, minutes_in, seconds_in):
        total=(minutes_in*60)+seconds_in
        if (total>5999):
            total=5999

        self.set_doublepoint(True)

        while total>0:
            minutes=total//60
            seconds=total%60

            minutes=str(minutes)
            seconds=str(seconds)

            minutes=minutes.zfill(2)
            seconds=seconds.zfill(2)

            self.set_values([int(minutes[0]),int(minutes[1]),int(seconds[0]),int(seconds[1])])

            time.sleep(1)
            total=total-1


        self.set_values([0,0,0,0])
        time.sleep(1)

        self.set_doublepoint(False)
        self.set_values(['d','o','n','E'])
        time.sleep(1)

        return

if __name__=="__main__":

        display=TM1637(CLK, DIO)

        display.timer(99,105)
        x=input("")
        display.clear()
        display.set_values([' ', '-',3 , 2])
        time.sleep(2)

        x=input("")
        display.clear()
        display.set_values(['r', 'Y', 'A', 'n'])
        time.sleep(2)

        x=input("")
        display.clear()
        display.set_doublepoint(True)
        display.set_values([1,0,0,0])
        display.set_brightness(7)
        time.sleep(2)


        elements=input("Enter the segments you'd like lit up (a-g):")
        name=input("Name your custom character: ")
        display.custom(elements,name)
        display.set_doublepoint(False)

        display.set_values([name,0,0,0])
        time.sleep(1)
        display.clear()
        display.set_values([name, name, 0,0])
        time.sleep(1)
        display.clear()
        display.set_values([name,name,name,0])
        time.sleep(1)
        display.clear()
        display.set_values([name,name,name,name])
        time.sleep(2)

        x=input("")
        display.clear()
        display.cleanup()
